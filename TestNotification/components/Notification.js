import React from 'react';
import { StyleSheet, Text, View, TouchableOpacity } from 'react-native';
import PushNotification from 'react-native-push-notification'


export default class Notification extends React.Component {
  async componentDidMount(){
    PushNotification.configure({

   // (required) Called when a remote or local notification is opened or received
    onNotification: function(notification) {
        console.warn( 'NOTIFICATION:', notification );
    },

    // IOS ONLY (optional): default: all - Permissions to register.
    permissions: {
        alert: true,
        badge: true,
        sound: true
    },

    // Should the initial notification be popped automatically
    // default: true
    popInitialNotification: true,

    /**
      * (optional) default: true
      * - Specified if permissions (ios) and token (android and ios) will requested or not,
      * - if not, you must call PushNotificationsHandler.requestPermissions() later
      */
    requestPermissions: true,
    });
    //setTimeout(()=>this.schedule(),10000)
  }
  // componentWillUnmount(){
  //   setTimeout(()=>this.schedule(),10000)
  // }
  schedule = () => {
    let notificationDate = new Date(Date.now() + 1000)
    let notificationMessage = "This is a long text to see whether it gets displayed in Android as bigText. Notification Scheduled a minute ago" 
    // PushNotification.localNotificationSchedule({
    //   message: notificationMessage, // (required)
    //   date: notificationDate, // in 60 secs
    // })
    PushNotification.localNotification({
      /* Android Only Properties */
      id: '0', // (optional) Valid unique 32 bit integer specified as string. default: Autogenerated Unique ID
      ticker: "My Notification Ticker", // (optional)
      autoCancel: true, // (optional) default: true
      largeIcon: "ic_launcher", // (optional) default: "ic_launcher"
      smallIcon: "ic_notification", // (optional) default: "ic_notification" with fallback for "ic_launcher"
      bigText: "My big text that will be shown when notification is expanded", // (optional) default: "message" prop
      subText: "This is a subText", // (optional) default: none
      color: "red", // (optional) default: system default
      vibrate: true, // (optional) default: true
      //vibration: 300, // vibration length in milliseconds, ignored if vibrate=false, default: 1000
      tag: 'some_tag', // (optional) add tag to message
      group: "group", // (optional) add group to message
      ongoing: false, // (optional) set whether this is an "ongoing" notification
      priority: "high", // (optional) set notification priority, default: high
      visibility: "private", // (optional) set notification visibility, default: private
      importance: "high", // (optional) set notification importance, default: high
      title: "My Notification Title", // (optional)
      message: "My Notification Message", // (required)
      playSound: false, // (optional) default: true
      soundName: 'default', // (optional) Sound to play when the notification is shown. Value of 'default' plays the default sound. It can be set to a custom sound such as 'android.resource://com.xyz/raw/my_sound'. It will look for the 'my_sound' audio file in 'res/raw' directory and play it. default: 'default' (default sound is played)
      number: '1', // (optional) Valid 32 bit integer specified as string. default: none (Cannot be zero)
     // repeatType: 'day', // (optional) Repeating interval. Check 'Repeating Notifications' section for more info.
      actions: '["Yes", "No"]',
    })
    console.warn("scheduled notifiation for ",notificationDate)
  }

  render() {
    return (
      <View style={styles.container}>
        <TouchableOpacity onPress={this.schedule}>
          <Text>Notify Me!!</Text>
        </TouchableOpacity>
      </View>
    );
  }
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#fff',
    alignItems: 'center',
    justifyContent: 'center',
  },
});